(ns learnclojure.chapt3.core9)
;;不可变性和持久性
;;clojure集合的两个重要特征是不可变性和持久性
(+ 1 2)
;=3
;;这里的3和+是完全独立的一个值，这个把两个数字相加的动作不会去修改任何一个参数的值。
;;python代码：lst=[];lst.append(0);lst
;;append真的修改了lst对象，这可能导致问题。
(def v (vec (range 1e6)))
(count v)
(def v2 (conj v 1e6))
(count v2)
;=1000001
(count v)
;=1000000
;;这里的v2是完全独立的数据结构，看起来conj(以及任何对clojure数据结构进行操作的函数)创建了它所操作的集合的完全拷贝
;;不过，实际情况不是这样的
;;对于clojure不可变数据结构的操作是非常高效的，通常跟java里对应的操作是一样高效的。这是因为clojure的数据结构是持久的。
;;这种技术使得你做过修改的集合和原来的结合共享内部数据存储，而同时保证这个源集合产生出来的集合一样的高效率
;;为了实现这个持久性又不牺牲性能，clojure数据结构实现了一种结构共享技术。
;;意思是说，对于任何一个操作，clojure都不会去做一个深度拷贝，只有受影响的会被添加删除，而不变的那些元素还是共享老集合里面的那些。


