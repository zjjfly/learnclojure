(ns learnclojure.chapt3.core7)
;;clojure提供了一些具体的数据结构供我们使用，它们都实习了一个或多个抽象
;;它们的区别大多在集合的构建方式

;;列表 list
;;一般都是用来做函数调用的，用来存储数据的场景不多，这和其他lisp方言不同，因为clojure使用更丰富的数据解构，如map，set，vector和序列。
;;序列在很大程度上跟list是相似的，这使得我们几乎在代码里不会直接用到list

;clojure的list是单向链表，所以只对链头支持高效的访问和修改(conj，pop，rest等函数)，由于是链表，所以不支持高效的随机访问。
;;它也不支持get，因为它的性能达不到get亚线性的要求。

;;列表是自身的序列，所以调用seq始终返回列表本身
;;真正用来存放数据的列表是这么用的
'(1 2 3)
;=(1 2 3)
;;没有引号会把1看成函数，1肯定不是函数，所以会报错
;;这个引号的副作用是，这个列表里的所有元素都不会被求值
'(1 2 (+ 1 2))
;;这种场景下，一般都用vector，如果真的需要用list，可以用list函数
(list 1 2 (+ 1 2))
;;list会把每一个参数作为列表的一个元素
;;用list？检查是否一个集合是否是列表
(list? '(2 1))

;;vector
;;vector是一种顺序数据结构，支持高效的随机访问和更改语义,类似java的arraylist
;;它实现了associative，indexwd。，stack