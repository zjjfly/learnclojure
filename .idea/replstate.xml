<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1445185561283">{:repl-history {:ide [], :local [&quot;(defn negated-sun-str\n  [&amp; numbers]\n  (str (- (apply + numbers))))&quot; &quot;(negated-sun-str 1 2 4)&quot; &quot;(defn negated-sun-str2\n  [&amp; numbers]\n  (comp str - +))&quot; &quot;(defn negated-sun-str2\n  (comp str - +))&quot; &quot;(def negated-sun-str2\n  (comp str - +))&quot; &quot;(negated-sun-str2 3 4 7)&quot; &quot;(require '[clojure.string as str])&quot; &quot;(require '[clojure.string :as str])&quot; &quot;(def camel-&gt;keyword (comp keyword\n                          str/join\n                          (partial map str/lower-case)\n                          #(str/split % #\&quot;(?&lt;=[a-z])(?=[A-Z])\&quot;)))&quot; &quot;(def camel-&gt;keyword (comp keyword\n                          str/join\n                          (partial interpose \\-)\n                          (partial map str/lower-case)\n                          #(str/split % #\&quot;(?&lt;=[a-z])(?=[A-Z])\&quot;)))&quot; &quot;(defn negated-sun-str1\n  [&amp; numbers]\n  (str (- (apply + numbers))))&quot; &quot;(negated-sun-str1 1 2 4)&quot; &quot;negated-sun-str1&quot; &quot;(defn negated-sun-str1\n  [numbers]\n  (str (- (apply + numbers))))&quot; &quot;(negated-sun-str1 [1 2 4])&quot; &quot;(def camel-&gt;keyword (comp keyword\n                          str/join\n                          (partial interpose \&quot;e\&quot;)\n                          (partial map str/lower-case)\n                          #(str/split % #\&quot;(?&lt;=[a-z])(?=[A-Z])\&quot;)))&quot; &quot;(def camel-&gt;keyword (comp keyword\n                          str/join\n                          (partial interpose \&quot;-\&quot;)\n                          (partial map str/lower-case)\n                          #(str/split % #\&quot;(?&lt;=[a-z])(?=[A-Z])\&quot;)))&quot; &quot;(camel-&gt;keyword \&quot;NotBad\&quot;)&quot; &quot;(camel-&gt;keyword1 \&quot;NotBad\&quot;)&quot; &quot;(defn  camel-&gt;keyword2\n  [s]\n  (-&gt;&gt; (str/split  s #\&quot;(?&lt;=[a-z])(?=[A-Z])\&quot;)\n       (map  str/lower-case)\n       (interpose \&quot;-\&quot;)\n       str/join\n       keyword))&quot; &quot;(camel-&gt;keyword2 \&quot;HeHe\&quot;)&quot; &quot;(re-seq #\&quot;(?&lt;=[a-z])(?=[A-Z])\&quot; \&quot;NotBad\&quot;)&quot; &quot;(re-seq #\&quot;(?&lt;=[a-z])\\w(?=[A-Z])\&quot; \&quot;NotCBad\&quot;)&quot; &quot;(re-seq #\&quot;(?&lt;=[a-z])\\w(?=[A-Z])\&quot; \&quot;NotcBad\&quot;)&quot; &quot;(def camel-&gt;pairs-&gt;map (comp (partial apply hash-map)\n                             (partial map-indexed (fn [i x]\n                                                    (if (odd? i)\n                                                      x\n                                                      (camel-&gt;keyword1 x))))))&quot; &quot;(camel-&gt;pairs-&gt;map [\&quot;CamelCase\&quot; 5 \&quot;lowCamelCase\&quot; 33])&quot; &quot;(defn adder \n  [n]\n  (fn [x]\n    (+ n x)))&quot; &quot;(defn adder\n  [n]\n  (fn [x]\n    (+ n x)))&quot; &quot;(adder 5)&quot; &quot;((adder 5) 1)&quot; &quot;(double-+ 1 2 3)&quot; &quot;(double-+ 1 2 4)&quot; &quot;(def double-+ (doubler *))&quot; &quot;(defn print-logger\n  [writer]\n  #(binding [*out* writer]\n    (println %)))&quot; &quot;(def *out*-logger (print-logger *out*))&quot; &quot;(*out*-logger \&quot;hello\&quot;)&quot; &quot;(def writer (java.io.StringWriter.))&quot; &quot;(def retained-logger (print-logger writer))&quot; &quot;(retained-logger \&quot;hehe\&quot;)&quot; &quot;(str writer)&quot; &quot;(require 'clojure.java.io)&quot; &quot;((defn file-logger\n  \&quot;docstring\&quot;\n  [file]\n  #(with-open [f (clojure.java.io/writer file :append true)]\n    ((print-logger f) %))))&quot; &quot;(defn file-logger\n  \&quot;docstring\&quot;\n  [file]\n  #(with-open [f (clojure.java.io/writer file :append true)]\n    ((print-logger f) %)))&quot; &quot;(def log-&gt;file (file-logger \&quot;message.log\&quot;))&quot; &quot;(log-&gt;file \&quot;hoho\&quot;)&quot; &quot;(log-&gt;file \&quot;dad\&quot;)&quot; &quot;(format \&quot;[%1$tY]\&quot; (java.util.Date.) \&quot;dad\&quot;)&quot; &quot;(*out*-logger (format \&quot;[%1$tY]\&quot; (java.util.Date.) \&quot;dad\&quot;))&quot; &quot;(*out*-logger (format \&quot;[%1$tY]\&quot;(java.util.Date.) \&quot;dad\&quot;))&quot; &quot;(*out*-logger (format \&quot;[%1$tY]\&quot; (Date.)\&quot;dad\&quot;))&quot; &quot;(*out*-logger (format \&quot;[%1$tY]\&quot; (Date.) \&quot;dad\&quot;))&quot; &quot;(*out*-logger (str (format \&quot;[%1$tY]\&quot; (Date.) \&quot;dad\&quot;)))&quot; &quot;(*out*-logger (+ (format \&quot;[%1$tY]\&quot; (Date.)) \&quot;dad\&quot;))&quot; &quot;(*out*-logger (str (format \&quot;[%1$tY]\&quot; (Date.)) \&quot;dad\&quot;))&quot; &quot;(log-&gt;file \&quot;qeqe\&quot;)&quot; &quot;(defn muti-logger\n  [&amp; loggers]\n  #(doseq [f loggers]\n    (f %)))&quot; &quot;(muti-logger *out*-logger log-&gt;file)&quot; &quot;(def log (muti-logger *out*-logger log-&gt;file))&quot; &quot;(log \&quot;nn\&quot;)&quot; &quot;(defn timestamped-logger\n  [logger]\n  #(logger (format \&quot;[%1$tY-%1$tm-%1$te %1$tH:%1$tM:%1$tS] %2$s\&quot;) (Date.) %))&quot; &quot;(defn timestamped-logger\n  [logger]\n  #(logger (format \&quot;[%1$tY-%1$tm-%1$te %1$tH:%1$tM:%1$tS] %2$s\&quot;  (Date.) %)))&quot; &quot;((timestamped-logger *out*-logger) 12)&quot; &quot;(def log-timestamped (timestamped-logger log))&quot; &quot;(log-timestamped \&quot;pp\&quot;)&quot; &quot;(require 'clojure.xml)&quot; &quot;(-&gt;&gt; (str \&quot;http://weather.yahooapis.com/forecastrss?w=2151330&amp;u=c\&quot;)\n     clojure.xml/parse)&quot; &quot;(-&gt;&gt; (str \&quot;http://weather.yahooapis.com/forecastrss?w=2151330&amp;u=c\&quot;)\n     clojure.xml/parse\n     :rss)&quot; &quot;(-&gt;&gt; (str \&quot;http://weather.yahooapis.com/forecastrss?w=2151330&amp;u=c\&quot;)\n     clojure.xml/parse\n     :link)&quot; &quot;(-&gt;&gt; (str \&quot;http://weather.yahooapis.com/forecastrss?w=2151330&amp;u=c\&quot;)\n     clojure.xml/parse\n     :link\n     print)&quot; &quot;(-&gt;&gt; (str \&quot;http://weather.yahooapis.com/forecastrss?w=2151330&amp;u=c\&quot;)\n     clojure.xml/parse\n     :content\n     print)&quot; &quot;(defn prime?\n  [n]\n  (cond\n    (== 1 n) false\n    (==2 n) true\n    (even? n) false\n    :else (-&gt;&gt; (range 3 (inc (Math/sqrt n)) 2)\n               (filter #(zero? (rem n %)))\n               empty?)))&quot; &quot;(defn prime?\n  [n]\n  (cond\n    (== 1 n) false\n    (== 2 n) true\n    (even? n) false\n    :else (-&gt;&gt; (range 3 (inc (Math/sqrt n)) 2)\n               (filter #(zero? (rem n %)))\n               empty?)))&quot; &quot;(prime? 14141)&quot; &quot;(prime? 5)&quot; &quot;(prime? 112589990)&quot; &quot;(prime? 1125899906842679)&quot; &quot;(time  (prime? 1125899906842679))&quot; &quot;(let [m-prime? (memoize prime?)])&quot; &quot;(time  (m-prime? 1125899906842679))&quot; &quot;(let [m-prime? (memoize prime?)]\n(time (m-prime? 1125899906842679)))&quot; &quot;(let [m-prime? (memoize prime?)]\n(time (m-prime? 1125899906842679))\n(time (m-prime? 1125899906842679)))&quot; &quot;(rand-int 1)&quot; &quot;(rand-int 2)&quot; &quot;(conj v 4)&quot; &quot;(conj v 4 5)&quot; &quot;(seq v)&quot; &quot;(def m {:a 4 :b 5})&quot; &quot;(conj s 4)&quot; &quot;(seq m)&quot; &quot;(conj m [:c 6])&quot; &quot;(seq s)&quot; &quot;#{2 1 3}&quot; &quot;#{1 2 3}&quot; &quot;(conj s 3 4)&quot; &quot;#{1 2 3 4}&quot; &quot;#{1 2 3 46}&quot; &quot;(def s #{1 3 4})&quot; &quot;(conj s 2)&quot; &quot;(def s #{1 2 3})&quot; &quot;(conj s 10)&quot; &quot;(seq lst)&quot;], :remote []}}</component>
</project>