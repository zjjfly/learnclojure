<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1443117554949">{:repl-history {:ide [], :local [&quot;'`(a b ~c)&quot; &quot;((let [a (inc (rand-int 6))\n       b (inc (rand-int 6))]\n  ))&quot; &quot;(let [a (inc (rand-int 6))\n       b (inc (rand-int 6))])&quot; &quot;(let [a (in c (rand-int 6))\n       b (inc (rand-int 6))] ((println (format \&quot;you rolled a %s and b %s\&quot; a b))))&quot; &quot;(let [a (in c (rand-int 6))\n       b (inc (rand-int 6))] (println (format \&quot;you rolled a %s and b %s\&quot; a b)))&quot; &quot;(let [a (inc (rand-int 6))\n      b (inc (rand-int 6))] (println (format \&quot;you rolled a %s and b %s\&quot; a b)))&quot; &quot;(let [a (inc (rand-int 6))\n      b (inc (rand-int 6))]\n  (println (format \&quot;you rolled a %s and b %s\&quot; a b))\n  (+ a b))&quot; &quot;(def p)&quot; &quot;(defn hypot\n  [x y]\n  (let [x2 (* x x)\n        y2 (* y y)]\n    (Math/sqrt (+ x2 y2))))&quot; &quot;(hypot 3 4)&quot; &quot;(java.util.ArrayList (1 2 4))&quot; &quot;(do (println \&quot;hi\&quot;) (apply * [1 3 6]))&quot; &quot;(first v)&quot; &quot;(second v)&quot; &quot;(last v)&quot; &quot;(nth v 2)&quot; &quot;(v 2)&quot; &quot;(.get v 2)&quot; &quot;(+ (first v) (v 2))&quot; &quot;(+ (first v) (first (v 3)))&quot; &quot;(def v [42 \&quot;foo\&quot; 99.2 [5 12]])&quot; &quot;(let [[x y z] v]\n  (+ x z))&quot; &quot;(let [x (v 0)\n      y (v 1)\n      z (v 2)]\n  (+ x z))&quot; &quot;(let [[x _ _ [y z]] v])&quot; &quot;(let [\n      [x _ _ [y z]] v]\n  (+ x z))&quot; &quot;(let [\n      [x _ _ [y z]] v]\n  (+ x y z))&quot; &quot;(let [[x &amp; rest] v]\n  rest)&quot; &quot;(let [[x &amp; rest] v]\n  “rest是一个序列”\n  rest)&quot; &quot;(let [[x y &amp; rest] v]\n  rest)&quot; &quot;(let [[x _ z :as origin-vector ] v]\n  (conj origin-vector (+ x z)))&quot; &quot;(def m {:a 5 :b 6\n        :c [7 8 9]\n        :d {:e 10 :f 11}\n        \&quot;foo\&quot; 88\n        42 false})&quot; &quot;(m \&quot;foo\&quot;)&quot; &quot;(let [{a :a b :b } m]\n  (+ a b))&quot; &quot;(let [{f \&quot;foo\&quot;} m]\n  (+ f 12))&quot; &quot;(let [{v 42} m]\n  (if v 1 0))&quot; &quot;(let [{x 3 y 8} [12 0 0 -18 44 6 0 0 1]]\n  (+ x y))&quot; &quot;(let [[x y] \&quot;bn\&quot;]\n  (+ x y))&quot; &quot;(let [[x y] \&quot;bn\&quot;]\n  (concat x y))&quot; &quot;(let [[x y] \&quot;bn\&quot;]\n  ( x y))&quot; &quot;x&quot; &quot;(let [[x y] \&quot;bn\&quot;]\n  x)&quot; &quot;(let [[x y] \&quot;bn\&quot;]\n  y)&quot; &quot;(let [{{e :e} :d} m]\n  (+ e 2))&quot; &quot;(let [{{e :e} :d} m]\n  (* e 2))&quot; &quot;(let [{[x y z ] :c} m]\n  (+ x y z))&quot; &quot;(java.util.Date 73 1 4)&quot; &quot;(def s {\&quot;birthday\&quot; (java.util.Date 73 1 4)})&quot; &quot;(def s {:birthday (Date 73 1 4)})&quot; &quot;(def s {:birthday (java.util.Date 73 1 4)})&quot; &quot;(def map-in-vector [ {:birthday (java.util.Date 73 1 4)}])&quot; &quot;(def map-in-vector [\&quot;James\&quot; {:birthday (java.util.Date 73 1 4)}])&quot; &quot;(def map-in-vector [\&quot;James\&quot; {:birthday (java.util.Date. 73 1 4)}])&quot; &quot;(def map-in-vector [\&quot;James\&quot; {:birthday (Date. 73 1 4)}])&quot; &quot;(let [name {day :birthday} map-in-vector]\n  (str name \&quot;is borned on\&quot; day))&quot; &quot;(let [[ name {day :birthday}] map-in-vector]\n  (str name \&quot;is borned on\&quot; day))&quot; &quot;(let [[ name {day :birthday}] map-in-vector]\n  (str name \&quot; is borned on\&quot; day))&quot; &quot;(let [[ name {day :birthday}] map-in-vector]\n  (str name \&quot; is borned on \&quot; day))&quot; &quot;(z :x)&quot; &quot;(z :y)&quot; &quot;(z :z)&quot; &quot;(def z (zipmap [:x :y :z] (repeatedly (partial rand-int ) 10)))&quot; &quot;(def rand (partial rand-int))&quot; &quot;(rands 100)&quot; &quot;(rands)&quot; &quot;(def rands (partial rand-int))&quot; &quot;(rands 10)&quot; &quot;(def rands (partial rand-int 10))&quot; &quot;(zipmap [:x :y :z] (repeatedly (rands 10)))&quot; &quot;(repeatedly (rands))&quot; &quot;(zipmap [:x :y :z] (repeatedly rands))&quot; &quot;(zipmap [:x :y :z] (repeatedly (partial rand-int 10)))&quot; &quot;(def z (zipmap [:x :y :z] (repeatedly (partial rand-int 10))))&quot; &quot;(zipmap [:x :y :z] (repeatedly (rand-int 10)))&quot; &quot;(let [{r1 :x r2 :y :as randoms}\n      (zipmap [:x :y :z] (repeatedly (rand-int 10)))])&quot; &quot;(zipmap [:x :y :z] (repeatedly (#rand-int 10)))&quot; &quot;(zipmap [:x :y :z] (repeatedly #(rand-int 10)))&quot; &quot;(let [{r1 :x r2 :y :as randoms}\n      (zipmap [:x :y :z] (repeatedly #(rand-int 10)))])&quot; &quot;(let [{r1 :x r2 :y :as randoms}\n      (zipmap [:x :y :z] (repeatedly #(rand-int 10)))]\n  (assoc randoms :sum (+ r1 r2)))&quot; &quot;(let [{k :unknown x :a \n       :or {k 50}}]\n  (+ k x))&quot; &quot;(let [{k :unknown x :a\n       :or {k 50}} m]\n  (+ k x))&quot; &quot;(let [{opt1 :option} {:option false}\n      opt1 (or opt1 true)])&quot; &quot;(or opt1 true)&quot; &quot;[{opt1 :option} {:option false}\n      opt1 (or opt1 true)]&quot; &quot;(let [{opt1 :option} {:option false}\n      opt1 (or opt1 true)\n      {opt2 :option\n       :or {opt2 true}} {:option false}\n      {:opt1 opt1 :opt2 opt2}])&quot; &quot;(let [{opt1 :option} {:option false}\n      opt1 (or opt1 true)\n      {opt2 :option\n       :or {opt2 true}} {:option false}\n      {:opt1 opt1 ,:opt2 opt2}])&quot; &quot;(let [{opt1 :option} {:option false}\n      opt1 (or opt1 true)\n      {opt2 :option :or {opt2 true}} {:option false}\n      {:opt1 opt1 ,:opt2 opt2}])&quot; &quot;(let [{opt1 :option} {:option false}\n      opt1 (or opt1 true)\n      {opt2 :option :or {opt2 true}} {:option false}\n      {:opt1 opt1,:opt2 opt2}])&quot; &quot;(let [{opt1 :option} {:option false}\n      opt1 (or opt1 true)\n      {opt2 :option :or {opt2 true}} {:option false}]\n      {:opt1 opt1,:opt2 opt2})&quot; &quot;(def chas {:name \&quot;zjj\&quot; :age 25 :location \&quot;Suzhou\&quot;} )&quot; &quot;(let [{:keys [name age location]} chas])&quot; &quot;(let [{:keys [name age location]} chas]\n  (format \&quot;%s is %s years old and lives in %s\&quot; name age location))&quot; &quot;(let [{:strs [name age location]} shi]\n  (format \&quot;%s is %s years old and lives in %s\&quot; name age location) )&quot; &quot;(def shi {'name \&quot;yang\&quot; 'age 54 'location \&quot;BeiJing\&quot;}\n  (format \&quot;%s is %s years old and lives in %s\&quot; name age location))&quot; &quot;(def shi {'name \&quot;yang\&quot; 'age 54 'location \&quot;BeiJing\&quot;})&quot; &quot;(def user-info [\&quot;robot\&quot; 2011 :name \&quot;Bob\&quot; :city \&quot;Boston\&quot;])&quot; &quot;(let [_ _ &amp; {:keys [name city]}user-info]\n  (fomat \&quot;%s is in %s \&quot; name city))&quot; &quot;(let [_ _ &amp; {:keys [name city]} user-info]\n  (fomat \&quot;%s is in %s \&quot; name city))&quot; &quot;(let [[_ _ &amp; {:keys [name city]}]  user-info]\n  (fomat \&quot;%s is in %s \&quot; name city))&quot; &quot;(let [[username year &amp; {:keys [name city]}]  user-info]\n  (fomat \&quot;%s is in %s \&quot; name city))&quot; &quot;(let [[username year &amp; {:keys [name city]}]  user-info]\n  (format \&quot;%s is in %s \&quot; name city))&quot; &quot;(fn [x]\n  (+ x 10))&quot;], :remote []}}</component>
</project>